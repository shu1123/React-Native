
1、、模板字符串

	let name = "jack";
	let age = 20;
	let str = name+" is "+age+" years old";

	//模板字符串 `数字1旁边的键
	let str2 = `${name} is ${age} years old!`;

	//快捷键 str2.log+tab键
	console.log(str2);

	//模板字符串的优点：保持原来的格式  ""字符串没有这种功能
	let str3 = `i am
		jack`;
	console.log(str3);

	
2、、、箭头函数

	/*let func = function (n) {
		console.log(n);
	}
	func(2)*/

	//=>代表function (n)   func = n  func：函数名   n：参数
	let func = n => console.log(n);
	func(3)

	/*let func = function (a,b) {
	  return a+b;
	 }
	 console.log(func1(2, 3));*/
	//多个参数，可以在=>之后直接跟直返回值
	let func1 = (a,b) => a+b;
	console.log(func1(2, 3));

	//多个参数，多条语句  函数体任然用{}
	let func2 = (a,b) => {
		a+=5;
		return a+b;
	}
	console.log(func2(2, 3));

	//返回值是对象的时候   由于大括号被解释为代码块，所以如果箭头函数直接返回一个对象，必须在对象外面加上括号，否则会报错。
	//如果箭头函数不需要参数或需要多个参数，就使用一个圆括号代表参数部分。
	let func3 = () => ({name:"jack",age:20});

	console.log(func3(3));

	//箭头函数+解构赋值
	let func4 = ({first,last}) => first + " " +last;
	console.log(func4({first:"jack" ,last:"tom"}));


	/*
	* 如果箭头函数的代码块部分多于一条语句，就要使用大括号将它们括起来，并且使用return语句返回。

	 var sum = (num1, num2) => { return num1 + num2; }
	* */
	/*
	* 下面是一种特殊情况，虽然可以运行，但会得到错误的结果。

	 let foo = () => { a: 1 };
	 foo() // undefined
	 上面代码中，原始意图是返回一个对象{ a: 1 }，但是由于引擎认为大括号是代码块，所以执行了一行语句a: 1。
	 这时，a可以被解释为语句的标签，因此实际执行的语句是1;，然后函数就结束了，没有返回值。
	* */


	/*//map函数  map代表遍历数组的每一个元素  n代表遍历的元素
	let arr = [1,2,3,4].map(function (n) {
		return n*2;
	});

	console.log(arr);

	//function中也可以不要参数  arguments实际传参的数组，arguments[0]代表参数列表中的第一个参数
	let arr2 = [1,2,3,4].map(function () {
		return arguments[0]*2;
	});
	console.log(arr2);

	//箭头函数表示方法：  =>代表function(n)
	let arr3 = [1,2,3,4].map(n=>n*3);
	console.log(arr3);*/


	//排序(升序)
	/*var arr = [1,4,2,5].sort(function (a,b) {
		return a-b;
	})*/
	/*
	var arr = [1,4,2,5].sort((a,b)=>a-b);
	console.log(arr);
	*/

三、Symbol
	新的数据类型 表示独一无二的值
	// 第七种数据类型（前六种是：undefined、null、布尔值（Boolean）、字符串（String）、数值（Number）、对象（Object））

	/*
	 Symbol 值通过Symbol函数生成。这就是说，对象的属性名现在可以有两种类型，
	 一种是原来就有的字符串，另一种就是新增的 Symbol 类型。
	 凡是属性名属于 Symbol 类型，就都是独一无二的，可以保证不会与其他属性名产生冲突。
	 */
	 
	 
	let s = Symbol();
	console.log(typeof s);
	// "symbol"
	//Symbol函数可以接受一个字符串作为参数，表示对 Symbol 实例的描述，主要是为了在控制台显示，或者转为字符串时，比较容易区分。
	let s1 = Symbol('foo');
	let s2 = Symbol('bar');

	console.log(s1);//Symbol(foo)
	console.log(s2);//Symbol(bar)
	console.log(s1 == s2);//false
	console.log(s1.toString());//Symbol(foo)


	//Symbol可以防止属性覆盖
	//属性覆盖的案例
	/*
	let obj = {name:"jack"};
	//在另外一个模块  会出现属性覆盖
	obj.name = function () {
		console.log("tom");
	};

	obj.name();//tom*/

	/*let obj = {name:"jack"};
	//在另外一个模块中
	let name = Symbol();
	obj[name] = function () {
		console.log("tom");
	}

	console.log(obj.name);//jack
	obj[name]();//tom*/

	/*注意：
	Symbol 值作为对象属性名时，不能用点运算符。

	const mySymbol = Symbol();
	const a = {};

	a.mySymbol = 'Hello!';
	a[mySymbol] // undefined
	a['mySymbol'] // "Hello!"
	上面代码中，因为点运算符后面总是字符串，所以不会读取mySymbol作为标识名所指代的那个值，导致a的属性名实际上是一个字符串，
	而不是一个 Symbol 值。

	 同理，在对象的内部，使用 Symbol 值定义属性时，Symbol 值必须放在方括号之中。
	 let s = Symbol();
	 let obj = {
	 [s]: function (arg) { ... }
	 };
	 obj[s](123);
	 上面代码中，如果s不放在方括号中，该属性的键名就是字符串s，而不是s所代表的那个 Symbol 值。
	*/ 
 
 
 
 
四、==（等于）和===（恒等于）区别
 
	/*==（等于）和===（恒等于）区别
	//==等于
	 1、如果两个值类型相同，则进行===比较
	 2、如果两个值类型不同，则可能相等，根据下面的规则进行类型转化在比较
	 a/如果一个是null，一个是undefined，那么相等
	 b/如果一个是字符串一个是数字，则把字符串转成数字比较
	 c/如果任一值是true，把他转化成1，在比较；如果任一值是false，把他转成0在比较
	 d/如果一个是对象，另一个是数值或是字符串，则把对象转化成基础类型的值在比较，利用他的toString或是value
	*/

	/*console.log("87" == 1);//false
	console.log("1" == 1);//true  在对比时先将“1”转化成数字1
	console.log("aabb" == 'aabb');//true
	let a = null;
	console.log(a == undefined);//true
	console.log(true == "1");//true   true:1  false:0*/


	/*
	===恒等于
	1、类型不同，则不相等
	2、如果两个都是数值，并且是同一个数，则相等（例外的是）如果其中至少一个是NaN,那么不相等
	3、如果两个都是字符串，并且每个位置上的字符都一样，则相等
	4、如果两个值都是true，或者都是false则相等
	5、如果两个值引用同一个对象或是函数则相等
	6.如果两个值都是null,或是都是undefined，那么相等*/
	console.log("87" === 1);//false
	console.log("1" === 1);//false  在对比时先将“1”转化成数字1
	console.log("aabb" === 'aabb');//true
	let a = null;
	console.log(a === undefined);//false
	console.log(true === "1");//false



 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 

